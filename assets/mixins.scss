
/* Container 
*/

/* http://stackoverflow.com/questions/6794000/css-fixed-position-but-relative-to-container */
@mixin container($margin-left) {
  width: 90% - $margin-left;
	margin: 0 auto;
	
	@include mobile-only {
	  width: 98% - $margin-left;
	}
	@include large-screen {
	  width: 70% - $margin-left;
	}
}




/* Button
*/


@mixin button {
  background: $color;
  color: $background;
  padding: $pad/4;
  
  a {
    color: $background;
  }
}


/* Accordion
*/
@mixin accordion {
	h2, h3 {
		cursor: pointer;
		padding: $pad/2 $pad/4;
		background: $light-gray-2;
		border-bottom: 1px solid $light-gray;
		margin-bottom: 1px;
		
		&:after {
			@include arrow-to-reveal-content;
		}
	}
	.pane {
		display: none;
		background: $background;
		padding: $pad;
		margin-bottom: $pad*2;
	}
}




/* Image bordered
*/
@mixin image-bordered($padding) {
	width: 100%-($padding*2);
	padding: $padding;
	border: 1px solid $light-gray;
	background: $background url(ajax-loader.gif) no-repeat 50% 50%;
}



/* Image rounded
*/
@mixin image-rounded {
	text-align: center;
	
	li {
		height: 14em;
		border-radius: 8em;
		padding-top: 2.5em;
		
		@include respond-to(desktop) {
			height: 16em;
			border-radius: 16em;
			padding-top: 5em;
		}
		
		
		background: $blue;
		box-shadow: 2px 1px 1px $gray;
		border: 1px solid $blue;
		
		&:hover {
			box-shadow: 2px 1px 1px $color;
			border: 1px solid $color;
		}
	}
}


/* Add to cart
*/
@mixin add-to-cart {
	background: $blue;
	
	.wpsc_container {
		padding: $pad $pad/2;
		
		.imagecol {
			display: none !important;
		}
		
		.single_product_display {
			.textcol {
				margin-left: 0 !important;
			}
		}
		
		table {
			width: 100%;
			margin-bottom: 0;
			
			label {
				font-weight: normal;
			}
			
			td {
				border-bottom: 1px dotted;
				padding: $pad/2;
			}
			
			tr.quantity { 
				input[type='text'] {
					width: 90%;
					color: $color;
					font-style: normal;
				}
			}
			
			tr.delivery {
				td {
					border-bottom: none;
				}
			}
			
			tr.submit {
				td {
					border-top: 1px solid;
					padding-top: $pad;
				}
			}
			
			tr.animation {
				display: none;
			}
			
			tr.price {
				background: none !important;
				font-size: 100%;
				
				.pricedisplay {
					float: none !important;
  				width: 99%;
				}
			}
			
			input.wpsc_buy_button, input.checkout-button, select.wpsc_select_variation {  
				width: 100%;
				font-size: small;
			}
			input.wpsc_buy_button {
				background: $green;
				color: $color;
				border: 1px dotted;
			}
			input.wpsc_buy_button:hover {
				font-weight: bold;
			}
			
			div.thanks-ok {
				background: #10A26F;
				padding: 1em;
			}
			
			div.thanks-error {
				background: #A53B08;
				padding: 1em;
			}
			
			.wpsc_cart_message {
				text-align: center;
			}
		}
	}
	
	#wishlist {
		@include block;
		
		margin-bottom: $pad;
		padding: 0 $pad;
	
		.wpfp-span {
			width: 80%;
			float: left;
			
			padding: $pad/2 $pad/4;
			text-align: center;
			background: $color;
			color: $very-light-gray;
			padding: $pad/2;
			
			&:hover {
				cursor: pointer;
				color: $background;
			} 
			
			a {
				color: $very-light-gray;
			}
		}	
	}
	
	#product-discontinued {
		margin: $pad;
		
		p {
			margin-bottom: $pad;
		}
	}
	
}



/* Responsive mixins
  - http://paulstamatiou.com/responsive-retina-blog-development-part-1
*/



$mq-mobile-portrait	  : 320px !default;
$mq-mobile-landscape	  : 480px !default;
$mq-tablet-portrait   : 640px !default;  
$mq-tablet-landscape	: 1024px !default;
$mq-desktop		: 1382px !default;
$mq-large-screen      : 1599px !default;

/*

!!! em is not working on iphone 3 !!!

$mq-mobile-portrait	: 20em !default;
$mq-mobile-landscape	: 30em !default;
$mq-tablet-portrait	: 40em !default;
$mq-tablet-landscape	: 64em !default;
$mq-desktop		: 86.375em !default;
$mq-large-screen: 99.93em !default;
*/


// Both portrait and landscape
@mixin mobile-only {
	@media (max-width : $mq-mobile-landscape) {
		@content;
	}
}

// Everything up to and including the portrait width of the phone
// Since it's the smallest query it doesn't need a min
@mixin mobile-portrait-only {
	@media (max-width : $mq-mobile-portrait) {
		@content;
	}
}

// Everything up to and including the mobile portrait
@mixin mobile-portrait-and-below {
	@media (max-width : $mq-mobile-portrait) {
		@content;
	}
}

// Everything above and including the mobile portrait
@mixin mobile-portrait-and-up {
	@media (min-width : $mq-mobile-portrait) {
		@content;
	}
}

// Everthing larger than a portrait mobile up until mobile landscape
@mixin mobile-landscape-only {
	@media only screen and (min-width : $mq-mobile-portrait + 1) and (max-width : $mq-mobile-landscape) {
		@content;
	}
}

// Everything up to and including the mobile landscape width
@mixin mobile-landscape-and-below {
	@media only screen and (max-width : $mq-mobile-landscape) {
		@content;
	}
}

// Everything above and including the mobile landscape width
@mixin mobile-landscape-and-up {
	@media only screen and (min-width : $mq-mobile-portrait + 1) {
		@content;
	}
}

// Both the portrait and landscape width of the tablet
// Larger than a landscape mobile but less than or equal to a landscape tablet
@mixin tablet-only {
	@media only screen and (min-width : $mq-mobile-landscape + 1) and (max-width : $mq-tablet-landscape) {
		@content;
	}
}

// Everything larger than mobile landscape up until the portrait width of the tablet
@mixin tablet-portrait-only {
	@media only screen and (min-width : $mq-mobile-landscape + 1) and (max-width : $mq-tablet-portrait) {
		@content;
	}
}

// Everything below and including the portrait width of the tablet
@mixin tablet-portrait-and-below {
	@media only screen and (max-width : $mq-tablet-portrait) {
		@content;
	}
}

// Everything above and including the portrait width of the tablet
@mixin tablet-portrait-and-up {
	@media only screen and (min-width : $mq-tablet-portrait + 1) {
		@content;
	}
}

// Larger than portrait but less than or equal to the landscape width
@mixin tablet-landscape-only {
	@media only screen and (min-width : $mq-tablet-portrait + 1) and (max-width : $mq-tablet-landscape) {
		@content;
	}
}

// Up to and including the tablet landscape
@mixin tablet-landscape-and-below {
	@media only screen and (max-width : $mq-tablet-landscape) {
		@content;
	}
}

// Everything larger than portrait tablet
@mixin tablet-landscape-and-up {
	@media only screen and (min-width : $mq-tablet-portrait + 1) {
		@content;
	}
}

// Everything larger than a landscape tablet
@mixin desktop-and-up {
	@media only screen and (min-width : $mq-desktop + 1) {
		@content;
	}
}

// Everything below and including the desktop 
@mixin desktop-and-below {
	@media only screen and (max-width : $mq-desktop) {
		@content;
	}
}

// Everything larger than a landscape tablet but less than or equal to the desktop
@mixin desktop-only {
	@media only screen and (min-width : $mq-tablet-landscape + 1) and (max-width : $mq-desktop) {
		@content;
	}
}


// Above 1600px
@mixin large-screen {
  @media only screen and (min-width : $mq-large-screen) {
		@content;
	}
}



@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 13/10), only screen and (min-resolution: 120dpi) {
		@content;
	}
}

@mixin image-2x($image, $width: auto, $height: $width) {
  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),
         only screen and (-o-min-device-pixel-ratio: 13/10),
         only screen and (min-resolution: 120dpi) {
    background-image: url($image);
    @if $width != auto {
      background-size: $width $height;
    }
  }
}

@mixin landscape {
  @media all and (orientation:landscape) {
    @content;
  }
}


@media only screen and (max-width : $mq-mobile-landscape) {
  .mobile { display: block; }
  .desktop { display: none; }
}

@media only screen and (min-width : $mq-mobile-landscape + 1) { 
  .mobile { display: none; }
  .desktop { display: block; }
}




/* Responisive, fluid Images
*/
img {
	max-width: 100%;
}



/* General mixins
*/


/* set z-index

- parent must have set 'position'
- this element must have set weight
- http://www.tjkdesign.com/articles/z-index/teach_yourself_how_elements_stack.asp

*/
@mixin z-index($level, $height) {
  position: relative;
  z-index: $level;
  height: $height;
}


/* rotate

- example rotate(180deg, 1.5)
*/
@mixin rotate($deg, $value) {
  -moz-transform: rotate($deg);  
  -webkit-transform: rotate($deg); 
  -o-transform: rotate($deg);
  -ms-transform: rotate($deg);
  filter:progid:DXImageTransform.Microsoft.BasicImage(rotation=$value);
  display: inline-block;
}

/* underline a text with padding and margin
*/
@mixin text-underlined {
  margin-bottom: $pad2;
  padding-bottom: $pad2;
  border-bottom: 1px solid;
}


/* make cursor to be pointer
*/
@mixin pointer {
  cursor: pointer;
}



/* list, inline 
*/
@mixin list-inline {
  display: block;
  margin: 0;
  li {
    display: inline-block;
    list-style-type: none;
    margin-left: 0;
    float: left;
    margin-right: $pad;
  }
  li.last {
    margin-right: 0;
  }
}

@mixin list-normal {
  li {
    display: inline-block;
  }
}


/* table, simple
*/
@mixin table-simple {
  width: 100%;

  thead {
    td, th {
      border-bottom: 1px solid;
    }
  }
  
  tbody {
    td.first {
      text-align: left;
    }    
  }
  td, th {
    padding: $pad/2;
    text-align: center;
  }
  
  tfoot {
    td {
      border-top: 1px solid;
    }
  }
}


/* make a column 

- $col : how many columns
- $items : how many items will be organized into columns marked .c1, .c2, ....
*/
@mixin col($col, $items) {
  @if $col == 2 {
    width: 47.5%;
    margin-right: 5%;
  
  } @else if $col == 3 {
    width: 30%;
    margin-right: 5%;
  
  } @else if $col == 4 {
    width: 23%;
    margin-right: 2.6%;
    
  } @else if $col == 5 {
    width: 18%;
    margin-right: 2.5%;
  }

  float: left;
  @include col-margin($col, $items);
  
  &.last {
    margin-right: 0;
  }
}


/* Remove right margin for the last column
*/
@mixin col-margin($col, $items) {
  @for $i from 1 to $items + 1 {
    @if $i % $col == 0 {
      &.c#{$i} { margin-right: 0; }
    }
  }
}






/* box-shadow
*/

@mixin box-shadow {
  background: $background;
  box-shadow: 0 10px 25px -10px rgba(0, 0, 0, 0.698), 0 1px rgba(0, 0, 0, 0.1), 0 0 4px rgba(0, 0, 0, 0.1) inset;
  -moz-box-shadow: 0 10px 25px -10px rgba(0, 0, 0, 0.698), 0 1px rgba(0, 0, 0, 0.1), 0 0 4px rgba(0, 0, 0, 0.1) inset;
  -webkit-box-shadow: 0 10px 25px -10px rgba(0, 0, 0, 0.698), 0 1px rgba(0, 0, 0, 0.1), 0 0 4px rgba(0, 0, 0, 0.1) inset;
}

/* make image fit within container
*/
@mixin image-full-width {
  max-width: 100%;
  height: auto;
}



/* hide an element 
*/
@mixin hidden {
  display: none;
}
.hidden {
  display: none;
}

/* Titles for HTML5 Outliner are hidden */
.outline {
  display: none;
}




/* block element -- expand something full size inside a container
*/
@mixin block {
  width: 100%;
  float: left;
}




/* The visual grid 
*/
.grid {
  position: absolute;
  top: 0;
  opacity: .1;
  display: none;
  z-index: -1;
}
#gridh .col {
  border-bottom: 1px solid;
  width: 118em;
  height: 19px; /* 1.25em = 20px - 1px border */
}
#gridv .col {
  border-right: 1px solid;
  width: 10%;
  height: 250em;
  float: left;
}
